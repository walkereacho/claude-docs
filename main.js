/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var S=Object.create;var g=Object.defineProperty;var $=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var T=Object.getPrototypeOf,D=Object.prototype.hasOwnProperty;var H=(o,a)=>{for(var e in a)g(o,e,{get:a[e],enumerable:!0})},w=(o,a,e,t)=>{if(a&&typeof a=="object"||typeof a=="function")for(let n of A(a))!D.call(o,n)&&n!==e&&g(o,n,{get:()=>a[n],enumerable:!(t=$(a,n))||t.enumerable});return o};var M=(o,a,e)=>(e=o!=null?S(T(o)):{},w(a||!o||!o.__esModule?g(e,"default",{value:o,enumerable:!0}):e,o)),N=o=>w(g({},"__esModule",{value:!0}),o);var L={};H(L,{default:()=>C});module.exports=N(L);var s=require("obsidian");var y=require("child_process"),x=require("util"),k=M(require("path")),U=(0,x.promisify)(y.exec),b=class{static async executeCommand(a,e,t){var n;try{let l=`${a}. Please modify the file at: ${e}`.replace(/"/g,'\\"').replace(/\$/g,"\\$"),u=t.claudePath||"claude",p=t.claudeModel||"sonnet",h=t.continueConversation?"--continue":"",d=`echo "${l}" | ${u} --model ${p} --permission-mode acceptEdits ${h}`.trim();console.log("Executing Claude Code command:",d.substring(0,100)+"...");let{stdout:m,stderr:r}=await U(d,{encoding:"utf-8",cwd:k.dirname(e),env:{...process.env,PATH:t.customPath||"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"}});return r&&!r.includes("Warning")&&console.error("Claude Code stderr:",r),console.log("Claude Code execution completed"),{success:!0}}catch(c){return console.error("Claude Code execution error:",c),(n=c.message)!=null&&n.includes("command not found")?{success:!1,error:"Claude Code CLI not found. Please ensure it is installed and in your PATH."}:{success:!1,error:c.message||"Unknown error occurred"}}}};function V(){let o=process.env.HOME||"";return o?[`${o}/.bun/bin/claude`,`${o}/.local/bin/claude`,"/usr/local/bin/claude","claude"][0]:"claude"}function B(){let o=process.env.HOME||"",a="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin";return o?`${o}/.bun/bin:/opt/homebrew/bin:/opt/homebrew/sbin:${a}`:a}var O={claudePath:V(),customPath:B()},C=class extends s.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new v(this.app,this)),this.addCommand({id:"send-doc-to-claude-code",name:"Send doc to Claude Code",checkCallback:e=>{var n,c;let t=this.app.workspace.getActiveViewOfType(s.MarkdownView);if(t){if(!e){let l=t.file;if(!l)return new s.Notice("No active file found"),!1;let u=((c=(n=this.app.vault.adapter).getBasePath)==null?void 0:c.call(n))||this.app.vault.adapter.basePath||"",p=u?`${u}/${l.path}`:l.path;new f(this.app,!1,async(h,d,m)=>{let r=new s.Notice(`\u{1F916} Claude Code (${d}) is working on your file...`,0);try{let i=await b.executeCommand(h,p,{...this.settings,claudeModel:d,continueConversation:m});r.hide(),i.success?new s.Notice("\u2705 Claude Code executed successfully! Check your file for changes.",5e3):new s.Notice(`\u274C Error: ${i.error||"Unknown error"}`,8e3)}catch(i){r.hide(),new s.Notice(`\u274C Unexpected error: ${i}`,8e3)}}).open()}return!0}}}),this.addCommand({id:"continue-claude-code-conversation",name:"Continue conversation with Claude Code",checkCallback:e=>{var n,c;let t=this.app.workspace.getActiveViewOfType(s.MarkdownView);if(t){if(!e){let l=t.file;if(!l)return new s.Notice("No active file found"),!1;let u=((c=(n=this.app.vault.adapter).getBasePath)==null?void 0:c.call(n))||this.app.vault.adapter.basePath||"",p=u?`${u}/${l.path}`:l.path;new f(this.app,!0,async(h,d,m)=>{let r=new s.Notice(`\u{1F916} Claude Code (${d}) is continuing conversation...`,0);try{let i=await b.executeCommand(h,p,{...this.settings,claudeModel:d,continueConversation:m});r.hide(),i.success?new s.Notice("\u2705 Claude Code executed successfully! Check your file for changes.",5e3):new s.Notice(`\u274C Error: ${i.error||"Unknown error"}`,8e3)}catch(i){r.hide(),new s.Notice(`\u274C Unexpected error: ${i}`,8e3)}}).open()}return!0}}})}onunload(){}async loadSettings(){this.settings=Object.assign({},O,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},f=class extends s.Modal{constructor(e,t,n){super(e);this.model="sonnet";this.continueConversation=t,this.onSubmit=n}onOpen(){let{contentEl:e}=this;e.createEl("h2",{text:"Send to Claude Code"}),e.createEl("p",{text:"Enter your prompt for Claude Code. The current document will be included automatically."});let t=e.createDiv({cls:"claude-model-container"});t.createEl("label",{text:"Model: ",cls:"claude-model-label"});let n=t.createDiv({cls:"claude-model-buttons"});[{value:"sonnet",label:"Sonnet"},{value:"opus",label:"Opus"},{value:"haiku",label:"Haiku"}].forEach(i=>{let P=n.createEl("button",{text:i.label,cls:this.model===i.value?"claude-model-button active":"claude-model-button"});P.onclick=()=>{this.model=i.value,n.querySelectorAll("button").forEach(E=>{E.removeClass("active")}),P.addClass("active")}});let l=e.createDiv({cls:"claude-continue-container"}),u=l.createEl("input",{type:"checkbox",cls:"claude-continue-checkbox"});u.checked=this.continueConversation,u.addEventListener("change",()=>{this.continueConversation=u.checked}),l.createEl("label",{text:"Continue previous conversation",cls:"claude-continue-label"});let h=e.createDiv().createEl("textarea",{cls:"claude-textarea",attr:{placeholder:"e.g., Add a new section about TypeScript best practices..."}});h.focus();let d=e.createDiv({cls:"claude-button-container"}),m=d.createEl("button",{text:"Cancel",cls:"claude-cancel-button"});m.onclick=()=>{this.close()};let r=d.createEl("button",{text:"Send to Claude",cls:"claude-submit-button"});r.onclick=()=>{let i=h.value.trim();i&&(this.result=i,this.close(),this.onSubmit(this.result,this.model,this.continueConversation))},h.addEventListener("keydown",i=>{i.key==="Enter"&&(i.metaKey||i.ctrlKey)&&r.click()})}onClose(){let{contentEl:e}=this;e.empty()}},v=class extends s.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Claude Code Plugin Settings"}),new s.Setting(e).setName("Claude Path").setDesc(`Path to the Claude CLI executable. Use "claude" if it's in your PATH, or provide full path like "/Users/username/.bun/bin/claude"`).addText(t=>t.setPlaceholder("/path/to/claude").setValue(this.plugin.settings.claudePath).onChange(async n=>{this.plugin.settings.claudePath=n,await this.plugin.saveSettings()})),new s.Setting(e).setName("System PATH").setDesc("Additional PATH directories for Claude to access tools like Node.js. Separate multiple paths with colons (:)").addTextArea(t=>t.setPlaceholder("/usr/local/bin:/usr/bin:/bin").setValue(this.plugin.settings.customPath).onChange(async n=>{this.plugin.settings.customPath=n,await this.plugin.saveSettings()})).addExtraButton(t=>t.setIcon("reset").setTooltip("Detect system PATH").onClick(async()=>{let n="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin",c=process.env.HOME||"",l=c?`${c}/.bun/bin:/opt/homebrew/bin:/opt/homebrew/sbin:${n}`:n;this.plugin.settings.customPath=l,await this.plugin.saveSettings(),this.display()}))}};
