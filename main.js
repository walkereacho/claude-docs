/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ClaudeCodePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// services/ClaudeCodeService.ts
var import_child_process = require("child_process");
var import_util = require("util");
var path = __toESM(require("path"));
var execAsync = (0, import_util.promisify)(import_child_process.exec);
var ClaudeCodeService = class {
  /**
   * Executes a Claude Code command with the given prompt and file path
   * Uses the Agent 1 approach: direct file path reference in the prompt
   */
  static async executeCommand(prompt, filePath, settings) {
    var _a;
    try {
      const fullPrompt = `${prompt}. Please modify the file at: ${filePath}`;
      const escapedPrompt = fullPrompt.replace(/"/g, '\\"').replace(/\$/g, "\\$");
      const claudePath = settings.claudePath || "claude";
      const model = settings.claudeModel || "sonnet";
      const command = `echo "${escapedPrompt}" | ${claudePath} --model ${model} --permission-mode acceptEdits`;
      console.log("Executing Claude Code command:", command.substring(0, 100) + "...");
      const { stdout, stderr } = await execAsync(command, {
        encoding: "utf-8",
        cwd: path.dirname(filePath),
        env: {
          ...process.env,
          PATH: settings.customPath || "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
        }
      });
      if (stderr && !stderr.includes("Warning")) {
        console.error("Claude Code stderr:", stderr);
      }
      console.log("Claude Code execution completed");
      return { success: true };
    } catch (error) {
      console.error("Claude Code execution error:", error);
      if ((_a = error.message) == null ? void 0 : _a.includes("command not found")) {
        return {
          success: false,
          error: "Claude Code CLI not found. Please ensure it is installed and in your PATH."
        };
      }
      return {
        success: false,
        error: error.message || "Unknown error occurred"
      };
    }
  }
};

// main.ts
function detectClaudePath() {
  const homePath = process.env.HOME || "";
  if (homePath) {
    const possiblePaths = [
      `${homePath}/.bun/bin/claude`,
      `${homePath}/.local/bin/claude`,
      "/usr/local/bin/claude",
      "claude"
      // fallback to PATH
    ];
    return possiblePaths[0];
  }
  return "claude";
}
function detectSystemPath() {
  const homePath = process.env.HOME || "";
  const defaultPath = "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin";
  if (homePath) {
    return `${homePath}/.bun/bin:/opt/homebrew/bin:/opt/homebrew/sbin:${defaultPath}`;
  }
  return defaultPath;
}
var DEFAULT_SETTINGS = {
  claudePath: detectClaudePath(),
  customPath: detectSystemPath()
};
var ClaudeCodePlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ClaudeCodeSettingTab(this.app, this));
    this.addCommand({
      id: "send-doc-to-claude-code",
      name: "Send doc to Claude Code",
      checkCallback: (checking) => {
        var _a, _b;
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            const file = markdownView.file;
            if (!file) {
              new import_obsidian.Notice("No active file found");
              return false;
            }
            const basePath = ((_b = (_a = this.app.vault.adapter).getBasePath) == null ? void 0 : _b.call(_a)) || this.app.vault.adapter.basePath || "";
            const filePath = basePath ? `${basePath}/${file.path}` : file.path;
            new ClaudePromptModal(this.app, async (prompt, model) => {
              const loadingNotice = new import_obsidian.Notice(`\u{1F916} Claude Code (${model}) is working on your file...`, 0);
              try {
                const result = await ClaudeCodeService.executeCommand(
                  prompt,
                  filePath,
                  { ...this.settings, claudeModel: model }
                );
                loadingNotice.hide();
                if (result.success) {
                  new import_obsidian.Notice("\u2705 Claude Code executed successfully! Check your file for changes.", 5e3);
                } else {
                  new import_obsidian.Notice(`\u274C Error: ${result.error || "Unknown error"}`, 8e3);
                }
              } catch (error) {
                loadingNotice.hide();
                new import_obsidian.Notice(`\u274C Unexpected error: ${error}`, 8e3);
              }
            }).open();
          }
          return true;
        }
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ClaudePromptModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.model = "sonnet";
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Send to Claude Code" });
    contentEl.createEl("p", {
      text: "Enter your prompt for Claude Code. The current document will be included automatically."
    });
    const modelContainer = contentEl.createDiv({ attr: { style: "margin: 10px 0;" } });
    modelContainer.createEl("label", { text: "Model: ", attr: { style: "font-weight: bold; margin-right: 10px;" } });
    const modelButtons = modelContainer.createDiv({ attr: { style: "display: inline-flex; gap: 5px;" } });
    const models = [
      { value: "sonnet", label: "Sonnet" },
      { value: "opus", label: "Opus" },
      { value: "haiku", label: "Haiku" }
    ];
    models.forEach((modelOption) => {
      const button = modelButtons.createEl("button", {
        text: modelOption.label,
        attr: {
          style: `padding: 5px 15px; ${this.model === modelOption.value ? "background-color: var(--interactive-accent); color: var(--text-on-accent);" : "background-color: var(--background-secondary);"}`
        }
      });
      button.onclick = () => {
        this.model = modelOption.value;
        modelButtons.querySelectorAll("button").forEach((btn) => {
          btn.style.backgroundColor = "var(--background-secondary)";
          btn.style.color = "";
        });
        button.style.backgroundColor = "var(--interactive-accent)";
        button.style.color = "var(--text-on-accent)";
      };
    });
    const inputContainer = contentEl.createDiv();
    const textArea = inputContainer.createEl("textarea", {
      attr: {
        style: "width: 100%; height: 150px; margin: 10px 0;",
        placeholder: "e.g., Add a new section about TypeScript best practices..."
      }
    });
    textArea.focus();
    const buttonContainer = contentEl.createDiv({
      attr: { style: "display: flex; justify-content: flex-end; gap: 10px; margin-top: 10px;" }
    });
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    cancelButton.onclick = () => {
      this.close();
    };
    const submitButton = buttonContainer.createEl("button", {
      text: "Send to Claude",
      attr: { style: "background-color: var(--interactive-accent); color: var(--text-on-accent);" }
    });
    submitButton.onclick = () => {
      const value = textArea.value.trim();
      if (value) {
        this.result = value;
        this.close();
        this.onSubmit(this.result, this.model);
      }
    };
    textArea.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && (e.metaKey || e.ctrlKey)) {
        submitButton.click();
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ClaudeCodeSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Claude Code Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("Claude Path").setDesc(`Path to the Claude CLI executable. Use "claude" if it's in your PATH, or provide full path like "/Users/username/.bun/bin/claude"`).addText((text) => text.setPlaceholder("/path/to/claude").setValue(this.plugin.settings.claudePath).onChange(async (value) => {
      this.plugin.settings.claudePath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("System PATH").setDesc("Additional PATH directories for Claude to access tools like Node.js. Separate multiple paths with colons (:)").addTextArea((text) => text.setPlaceholder("/usr/local/bin:/usr/bin:/bin").setValue(this.plugin.settings.customPath).onChange(async (value) => {
      this.plugin.settings.customPath = value;
      await this.plugin.saveSettings();
    })).addExtraButton((button) => button.setIcon("reset").setTooltip("Detect system PATH").onClick(async () => {
      const defaultPath = "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin";
      const homePath = process.env.HOME || "";
      const detectedPath = homePath ? `${homePath}/.bun/bin:/opt/homebrew/bin:/opt/homebrew/sbin:${defaultPath}` : defaultPath;
      this.plugin.settings.customPath = detectedPath;
      await this.plugin.saveSettings();
      this.display();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
